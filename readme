// Using JavaScript React. I first created the Lawrence.js which in it i created a musicCompetition. The musicCompetition I created  
// just have first three runup competitor that is Asake, Davido and Buna-Boy. 
// Steps taken {
//     firstly I created  a class called MusicCompetition and in it I created  the component of the class that is the number of music and it was assigned to 10000; i created the three main artistic involves in the competition which is burna-boy, asake, and davido; then i went on to create the number of syudio and also the number of Fans and the music of the year. 
//     Although i reassign it the value especially the artist of the year and assign the artist to their performnace and using "This." properties i was able to display our over written code. I created a variable called musicEp and reassign it to our main class called musicCompetition using the "new feature" function, which i from it reassign all my code and it ran properly,
//     Finally i was able to display the my mini musicCompetition and it ran very well in the console.
// }

// In the second file i mainly use the static properties
// steps taken{
//     firstly i created a class called letsknoweachOther and i set the properties of my class to my details;
//     I did that because i was trying to assign more than one static in the musicCompetition code and it was so hard for me to do but after having a session with our facilitator, He explained that you can more than one static feature so i use this as a learning experience for the static feature.
//     Second, I created a class property called lastName, emails, firstName; using the static properties like "this" and also i reassign all the features in the class property outside the class property and using the properties individually like "const africaBeauty = letsKnoweachOther.getfullname" and with this properties i was able to get an individual properties of what was assigne to the class. 
// }
           please The Lawrence and static.js belong to Lastweek          

            THIS IS THE TASK MEANT FOR THIS WEEK:üåêüí¨üåéüåçüåè
            
            firstName: Chukwu 
            middleName: Lawrence
            lastName: Chinecherem
            

            Tasks & Assignments
1. During the last lesson on OOAD, you were told to model an LMS, come up with a class, and use-case diagrams. Here, you are required to translate the class diagram into code. That is, build the classes you have drawn using javascript. While making sure their members represent and do what you modelled, including a few of the functionalities captured by your use case diagram. One should be able to test your code.

Therefore, you must include a readme that describes what you did along with the diagrams from your previous task. It should include how to run your solution to produce useful results.


2. Apply inheritance to your solution in (1) above. (This can be in a separate file if your class diagram did not capture inheritance, of course, it is supposed to.)


                            solution:
Point1:
I created A file called Task.js; And i my "file task.js" i assigned it to the UML diagram; i did last week.
// The Uml diagram i worked on was that i created a reportsheet on how tenant of LawrenceShop pays Rent and also I pickpointed Some Shops that 
// still owe Rent and also the landlord Rules and Regulation.

Point2:
 I created the Parent Class called LawrenceShop{
    within the parent name i created a constructor called "LawrenceShops";
    then also within the parent name i also created two method called called "Details and RentRequirements"
    which i consoled.
 }

 Point3:
  I created Four child classes called  ShopA, ShopB, ShopC, ShopD, which i inherit the featues in our main class called LawrenceShop.

Finally:
I consoled each of the child classes with the featues in our main class and it worked out perfectly.


Am so happy that I CAN NOW CODE MY IMAGINATION TO REALITY üí¨